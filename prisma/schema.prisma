// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [user_id])
  userId String  @unique
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt
  user_id        String?   @unique @default(uuid())
  email_verified Boolean?  @default(false)
  phone_verified Boolean?  @default(false)
  phone          String?
  accounts       Account[]
  profile        Profile?
}

model Account {
  account_id    String     @unique
  name          String
  type          String
  available     Decimal
  current       Decimal
  limit         Decimal
  iso_currency_code String
  unofficial_currency_code String
  timestamp     DateTime
  balances      Balance[]
  holdings      Holding[]
  securities    Security[]
  items         Item[]
  owners        Owner[]
  User          User?      @relation(fields: [userId], references: [id])
  userId        Int?
}

model Item {
  item_id     String  @unique
  institution_id String
  institution_name String
  webhook     String
  request_id  String
  update_type String
  consent_expiration_time String
  account     Account @relation(fields: [accountId], references: [account_id])
  accountId   String
}

model Holding {
  holding_id          String    @unique
  cost_basis          Decimal
  institution_price   Decimal
  institution_price_as_of DateTime
  institution_price_datetime DateTime
  institution_value   Decimal
  iso_currency_code   String
  unofficial_currency_code String
  vested_quantity     Decimal
  vested_value        Decimal
  quantity            Decimal
  accountId           String
  securityId          String
  account             Account   @relation(fields: [accountId], references: [account_id])
  Security            Security? @relation(fields: [securitySecurity_id], references: [security_id])
  securitySecurity_id String?
}

model Security {
  security_id String    @unique
  isin        String
  cusip       String
  sedol       String
  institution_security_id String
  institution_id String
  proxy_security_id String
  name        String
  ticker_symbol String
  is_cash_equivalent Boolean
  type        String
  close_price Decimal
  close_price_as_of DateTime
  iso_currency_code String
  unofficial_currency_code String
  market_identifier_code String
  sector      String
  industry    String
  option_contract_id String
  account     Account   @relation(fields: [accountId], references: [account_id])
  accountId   String
  holdings    Holding[]
}

model Balance {
  balance_id    String  @unique
  available     Decimal
  current       Decimal
  limit         Decimal
  iso_currency_code String
  unofficial_currency_code String
  timestamp     DateTime
  account       Account @relation(fields: [accountId], references: [account_id])
  accountId     String
}

model Owner {
  owner_id  String  @unique
  name      String?
  phone_number String?
  phone_type String?
  phone_primary Boolean?
  email     String
  email_type String?
  email_primary Boolean?
  street   String?
  region   String?
  address   String?
  city      String?
  state     String?
  postal_code       String?
  country   String?
  address_primary Boolean?
  account   Account @relation(fields: [accountId], references: [account_id])
  accountId String
}
